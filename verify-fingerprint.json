{"environmentStatus":{"os":"Linux","osVersion":"5.15.153.1-microsoft-standard-WSL2","architecture":"x86_64","git":"Installed","gitVersion":"git version 2.47.0","gitBranch":"main","lastCommit":"Thu Oct 17 21:45:23 2024 +1100"},"files":[{"path":"docker-compose.yml","size":861,"lastModified":"2024-10-18 14:37:27.854581129 +1100","content":"services:  backend:    build:      context: .      dockerfile: Dockerfile.backend    ports:      - \"8000:8000\"    volumes:      - .\/backend:\/app    depends_on:      - db  # Ensure backend starts after the database    environment:      - DATABASE_URL=postgresql:\/\/postgres:password@db:5432\/mydatabase  frontend:    build:      context: .      dockerfile: Dockerfile.frontend    ports:      - \"80:80\"  # Map container's Nginx port 80 to the machine's port 80 (could be \"3000:80\" if preferred)    volumes:      - .\/frontend:\/app    depends_on:      - backend  db:    image: postgres:17    environment:      POSTGRES_USER: postgres      POSTGRES_PASSWORD: password      POSTGRES_DB: mydatabase    volumes:      - postgres_data:\/var\/lib\/postgresql\/data    ports:      - \"5432:5432\"# Define named volumesvolumes:  postgres_data:"},{"path":"backend/main.py","size":360,"lastModified":"2024-10-17 15:56:53.288818247 +1100","content":"from fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewareapp = FastAPI()app.add_middleware(    CORSMiddleware,    allow_origins=[\"*\"],  # Adjust this to your needs    allow_credentials=True,    allow_methods=[\"*\"],    allow_headers=[\"*\"],)@app.get(\"\/\")async def root():    return {\"message\": \"Hello from the Tactu backend!\"}"},{"path":"backend/requirements.txt","size":283,"lastModified":"2024-10-18 18:58:39.732186907 +1100","content":"annotated-types==0.7.0anyio==4.6.2.post1click==8.1.7exceptiongroup==1.2.2fastapi==0.115.2h11==0.14.0idna==3.10pydantic==2.9.2pydantic_core==2.23.4sniffio==1.3.1starlette==0.40.0typing_extensions==4.12.2uvicorn==0.32.0psycopg2-binary==2.9.10  # Add PostgreSQL dependency"},{"path":"frontend/tsconfig.app.json","size":552,"lastModified":"2024-10-16 21:30:15.004252677 +1100","content":"{  \"compilerOptions\": {    \"target\": \"ES2020\",    \"useDefineForClassFields\": true,    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],    \"module\": \"ESNext\",    \"skipLibCheck\": true,    \/* Bundler mode *\/    \"moduleResolution\": \"bundler\",    \"allowImportingTsExtensions\": true,    \"isolatedModules\": true,    \"moduleDetection\": \"force\",    \"noEmit\": true,    \"jsx\": \"react-jsx\",    \/* Linting *\/    \"strict\": true,    \"noUnusedLocals\": true,    \"noUnusedParameters\": true,    \"noFallthroughCasesInSwitch\": true  },  \"include\": [\"src\"]}"},{"path":"frontend/tsconfig.json","size":119,"lastModified":"2024-10-16 21:30:15.004252677 +1100","content":"{  \"files\": [],  \"references\": [    { \"path\": \".\/tsconfig.app.json\" },    { \"path\": \".\/tsconfig.node.json\" }  ]}"},{"path":"frontend/package.json","size":849,"lastModified":"2024-10-17 16:34:14.274960350 +1100","content":"{  \"name\": \"frontend\",  \"private\": true,  \"version\": \"0.0.0\",  \"type\": \"module\",  \"scripts\": {    \"dev\": \"vite\",    \"build\": \"tsc -b && vite build\",    \"lint\": \"eslint .\",    \"preview\": \"vite preview\"  },  \"dependencies\": {    \"@chakra-ui\/react\": \"^2.10.3\",    \"@emotion\/react\": \"^11.13.3\",    \"@emotion\/styled\": \"^11.13.0\",    \"framer-motion\": \"^11.11.9\",    \"react\": \"^18.3.1\",    \"react-dom\": \"^18.3.1\",    \"reactflow\": \"^11.11.4\"  },  \"devDependencies\": {    \"@eslint\/js\": \"^9.11.1\",    \"@types\/react\": \"^18.3.10\",    \"@types\/react-dom\": \"^18.3.0\",    \"@vitejs\/plugin-react\": \"^4.3.2\",    \"eslint\": \"^9.11.1\",    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",    \"eslint-plugin-react-refresh\": \"^0.4.12\",    \"globals\": \"^15.9.0\",    \"typescript\": \"^5.5.3\",    \"typescript-eslint\": \"^8.7.0\",    \"vite\": \"^5.4.8\"  }}"},{"path":"frontend/.gitignore","size":253,"lastModified":"2024-10-16 21:30:15.004252677 +1100","content":"# Logslogs*.lognpm-debug.log*yarn-debug.log*yarn-error.log*pnpm-debug.log*lerna-debug.log*node_modulesdistdist-ssr*.local# Editor directories and files.vscode\/*!.vscode\/extensions.json.idea.DS_Store*.suo*.ntvs**.njsproj*.sln*.sw?"},{"path":"frontend/tsconfig.node.json","size":479,"lastModified":"2024-10-16 21:30:15.004252677 +1100","content":"{  \"compilerOptions\": {    \"target\": \"ES2022\",    \"lib\": [\"ES2023\"],    \"module\": \"ESNext\",    \"skipLibCheck\": true,    \/* Bundler mode *\/    \"moduleResolution\": \"bundler\",    \"allowImportingTsExtensions\": true,    \"isolatedModules\": true,    \"moduleDetection\": \"force\",    \"noEmit\": true,    \/* Linting *\/    \"strict\": true,    \"noUnusedLocals\": true,    \"noUnusedParameters\": true,    \"noFallthroughCasesInSwitch\": true  },  \"include\": [\"vite.config.ts\"]}"},{"path":"Dockerfile.backend","size":1492,"lastModified":"2024-10-18 19:13:21.575616480 +1100","content":"# Stage 1: Build stageFROM python:3.11-slim as build-stage# Set the working directoryWORKDIR \/app# Install system dependencies required for Python packagesRUN apt-get update && apt-get install -y \\    build-essential \\    libpq-dev \\    curl \\    libcurl4-openssl-dev \\    libcairo2-dev \\    pkg-config \\    libgirepository1.0-dev \\    gir1.2-gtk-3.0 \\    libyaml-dev \\    && rm -rf \/var\/lib\/apt\/lists\/*# Copy the requirements file to the build stageCOPY backend\/requirements.txt \/app\/requirements.txt# Install Python dependencies in the build stageRUN pip install --no-cache-dir -r requirements.txt# Copy the application source code into the build stageCOPY backend\/ \/app# Stage 2: Final imageFROM python:3.11-slim as final-stage# Set the working directoryWORKDIR \/app# Install only runtime dependencies (system libraries)RUN apt-get update && apt-get install -y \\    libpq-dev \\    curl \\    libcurl4-openssl-dev \\    libcairo2 \\    libgirepository1.0-dev \\    gir1.2-gtk-3.0 \\    libyaml-dev \\    && rm -rf \/var\/lib\/apt\/lists\/*# Copy installed Python packages from the build stageCOPY --from=build-stage \/usr\/local\/lib\/python3.11\/site-packages \/usr\/local\/lib\/python3.11\/site-packages# Copy the source code from the build stageCOPY --from=build-stage \/app \/app# Expose the portEXPOSE 8000# Command to run the FastAPI application using python -m uvicornCMD [\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]"},{"path":"Dockerfile.frontend","size":542,"lastModified":"2024-10-18 14:37:29.024688697 +1100","content":"# Stage 1: Build the React appFROM node:18 AS build-stageWORKDIR \/frontend# Copy package.json and install dependenciesCOPY .\/frontend\/package*.json .\/RUN npm install# Copy the source code and build the appCOPY .\/frontend\/ .\/RUN npm run build# Stage 2: Serve the static files using NginxFROM nginx:alpine AS runtime-stage# Copy the built frontend app from the build stageCOPY --from=build-stage \/frontend\/dist \/usr\/share\/nginx\/html# Expose the port Nginx will listen onEXPOSE 80# Start NginxCMD [\"nginx\", \"-g\", \"daemon off;\"]"}],"folderStructure":["Dockerfile.backend","Dockerfile.frontend","backend/","  main.py","  requirements.txt","docker-compose.yml","frontend/","  README.md","  eslint.config.js","  index.html","  package-lock.json","  package.json","  public/","    vite.svg","  src/","    App.css","    App.tsx","    assets/","      react.svg","    index.css","    main.tsx","    vite-env.d.ts","  tsconfig.app.json","  tsconfig.app.tsbuildinfo","  tsconfig.json","  tsconfig.node.json","  tsconfig.node.tsbuildinfo","  vite.config.ts","verify_environment.sh"]}
